package com.uploadFile;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.uploadFile.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@Autowired
	private TextsRepository textRepository;
	
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/allUsers")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@PostMapping(path="/addMessage")
	public @ResponseBody String addNewMessage(@RequestParam String sender,
			@RequestParam String receiver, @RequestParam String text, @RequestParam String date, @RequestParam String time) {
		Texts t = new Texts();
		t.setSender(sender);
		t.setReceiver(receiver);
		t.setText(text);
		t.setDate(date);
		t.setTime(time);
		textRepository.save(t);
		return "Saved";
	}
	
	@GetMapping(path="/allMessages")
	public @ResponseBody Iterable<Texts> getAllTexts(){
		return textRepository.findAll();
	}
	
    @DeleteMapping(path="/texts/{id}")
    public @ResponseBody String deleteTexts(@PathVariable Long id) {
    	System.out.println(id.getClass());
        textRepository.deleteById(id);
        return "DELETED";
    }
	
	
}